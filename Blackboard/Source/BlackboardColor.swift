//
// Copyright (c) 2017 Nathan E. Walczak
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

import Foundation

struct BlackboardColor {
    
    let red: Double
    let green: Double
    let blue: Double
    let alpha: Double
    
    let name: String
    let functionName: String
    
}

extension BlackboardColor {
    
    init?(colorSet: ColorSet) {
        self.red = colorSet.red
        self.green = colorSet.green
        self.blue = colorSet.blue
        self.alpha = colorSet.alpha
        
        self.name = colorSet.name
        self.functionName = Naming.methodName(fromIdentifier: colorSet.name)
    }
    
}

extension BlackboardColor {
    
    fileprivate func roundedIntValue(_ double: Double) -> Int {
        return Int((double * 255).rounded())
    }
    
    var redIntValue: Int {
        return roundedIntValue(red)
    }
    
    var greenIntValue: Int {
        return roundedIntValue(green)
    }
    
    var blueIntValue: Int {
        return roundedIntValue(blue)
    }
    
    var hexValue: String {
        return String(format: "#%06X", (redIntValue << 16 + greenIntValue << 8 + blueIntValue))
    }
    
    var rgbaValue: String {
        return "rgb(\(redIntValue), \(greenIntValue), \(blueIntValue))"
    }
    
}

extension SwiftSource {
    
    func appendColors(colors: [BlackboardColor]) {
        append("//")
        append("//  UIColorExtensions.swift")
        append("//")
        append("//  This file is automatically generated; do not modify.")
        append("//")
        append()
        append("import UIKit")
        append()
        append("fileprivate func color(named: String, red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) -> UIColor") {
            append("if #available(iOS 11.0, *)") {
                append("if let color = UIColor(named: named)") {
                    append("return color")
                }
            }
            append("return UIColor(red: red, green: green, blue: blue, alpha: alpha)")
        }
        append()
        append("extension UIColor") {
            append()
            let colors = colors.sorted { $0.functionName < $1.functionName }
            colors.forEach(appendColor)
        }
    }
    
    func appendColor(color: BlackboardColor) {
        append("// \(color.hexValue) \(color.rgbaValue)")
        append("static let \(color.functionName) = color(named: \"\(color.name)\", red: \(color.red), green: \(color.green), blue: \(color.blue), alpha: \(color.alpha))")
        append()
    }
    
}
