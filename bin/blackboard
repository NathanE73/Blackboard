#!/usr/bin/swift

//
// Copyright (c) 2016 Nathan E. Walczak
// 
// MIT License
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// 

import AppKit

// MARK: - String+NSString.swift -

extension String {
    
    // public var lastPathComponent: String { get }
    public var lastPathComponent: String {
        return (self as NSString).lastPathComponent
    }
    
    // public var deletingLastPathComponent: String { get }
    public var deletingLastPathComponent: String {
        return (self as NSString).deletingLastPathComponent
    }
    
    // public func appendingPathComponent(str: String) -> String
    public func appendingPathComponent(_ str: String) -> String {
        return (self as NSString).appendingPathComponent(str)
    }
    
    // public var pathExtension: String { get }
    public var pathExtension: String {
        return (self as NSString).pathExtension
    }
    
    // public var deletingPathExtension: String { get }
    public var deletingPathExtension: String {
        return (self as NSString).deletingPathExtension
    }
    
    // public func appendingPathExtension(str: String) -> String?
    public func appendingPathExtension(_ str: String) -> String? {
        return (self as NSString).appendingPathExtension(str)
    }
    
    // public var expandingTildeInPath: String { get }
    public var expandingTildeInPath: String {
        return (self as NSString).expandingTildeInPath
    }
    
}

// MARK: - StringExtensions.swift -

extension String {
    
    var firstCharacterLowercased: String {
        guard let firstCharacter = characters.first else {
            return self
        }
        return String(firstCharacter).lowercased() + String(characters.dropFirst(1))
    }
    
    func removingSuffix(_ suffix: String) -> String {
        if hasSuffix(suffix) {
            return String(characters.dropLast(suffix.characters.count))
        }
        return self
    }
    
    var trimmingWhitespaceCharacters: String {
        return trimmingCharacters(in: .whitespaces)
    }
    
}

// MARK: - FileManagerExtensions.swift -

extension FileManager {
    
    func isDirectory(_ path: String) -> Bool {
        var isDirectory: ObjCBool = false
        if fileExists(atPath: path, isDirectory: &isDirectory) && isDirectory.boolValue {
            return true
        }
        return false
    }
    
    func isFile(_ path: String) -> Bool {
        var isDirectory: ObjCBool = false
        if fileExists(atPath: path, isDirectory: &isDirectory) && !isDirectory.boolValue {
            return true
        }
        return false
    }
    
}

// MARK: - Naming.swift -

struct Naming {
    
    static func memberName(fromIdentifier identifier: String, namespace: String? = nil) -> String {
        if let namespace = namespace {
            return namespace + name(fromIdentifier: identifier)
        }
        return name(fromIdentifier: identifier)
    }
    
    static func methodName(fromIdentifier identifier: String, namespace: String? = nil, suffix: String? = nil, prefix: String? = nil) -> String {
        let name: String
        if let namespace = namespace {
            name = namespace + self.name(fromIdentifier: identifier)
        }
        else {
            name = self.name(fromIdentifier: identifier)
        }
        
        var methodName: String
        
        if let prefix = prefix {
            methodName = prefix + name
        }
        else {
            methodName = name.firstCharacterLowercased
        }
        
        if let suffix = suffix {
            methodName += suffix
        }
        
        return methodName
    }
    
    static func name(fromIdentifier identifier: String) -> String {
        var name = ""
        
        var shouldUppercaseNextCharacter = true
        
        for character in identifier.characters {
            
            if [" ", "_", "-"].contains(character) {
                shouldUppercaseNextCharacter = true
                continue
            }
            
            if shouldUppercaseNextCharacter {
                shouldUppercaseNextCharacter = false
                let uppercaseCharacter = String(character).uppercased()
                name += uppercaseCharacter
                continue
            }
            
            name.append(character)
        }
        
        return name
    }
    
}

// MARK: - SwiftSource.swift -

class SwiftSource {
    
    fileprivate var lines: [(indentLevel: Int, line: String)] = []
    
    func append(_ line: String = "") {
        if line == "" && line == lines.last?.line {
            return // don't allow multiple blank lines
        }
        
        lines.append((indentLevel, line))
    }
    
    func append(_ line: String, block: () -> Void) {
        append("\(line) {")
        indent()
        block()
        unindent()
        append("}")
    }
    
    var source: String {
        var source: [String] = []
        
        var indentLevel = 0
        var indent = ""
        
        lines.forEach { entry in
            if indentLevel != entry.indentLevel {
                indentLevel = entry.indentLevel
                indent = ""
                for _ in 0 ..< (indentLevel) {
                    indent.append("    ")
                }
            }
            
            source.append("\(indent)\(entry.line)")
        }
        
        return source.joined(separator: "\n")
    }
    
    // MARK: Indent Level
    
    var indentLevel = 0
    
    func indent() {
        indentLevel += 1
    }
    
    func unindent() {
        indentLevel = max(0, indentLevel - 1)
    }
    
}

extension SwiftSource: CustomStringConvertible {
    
    var description: String {
        return source
    }
    
}

// MARK: - Storyboard.swift -

struct Storyboard {
    
    let name: String
    
    let viewControllers: [StoryboardViewController]
    
}

extension Storyboard {
    
    func viewControllerWith(id: String) -> StoryboardViewController? {
        return viewControllers
            .first { $0.id == id }
    }
    
    func navigationControllerFor(id: String) -> StoryboardViewController? {
        return viewControllers
            .filter { $0.type == .navigationController }
            .first { viewController in
                return viewController.segues
                    .first { $0.destination == id} != nil
            }
    }
    
}

extension Storyboard: CustomStringConvertible {
    
    var description: String {
        return "name: \(name), viewControllers.count: \(viewControllers.count)"
    }
    
}

extension Storyboard {
    
    init?(url: URL) {
        guard let xmlDocument = try? XMLDocument(contentsOf: url) else {
            return nil
        }
        
        guard xmlDocument.rootElement()?.attribute(forName: "launchScreen")?.stringValue != "YES" else {
            return nil
        }
        
        self.name = url.deletingPathExtension().lastPathComponent
        
        guard let sceneNodes = try? xmlDocument.nodes(forXPath: "//scene") else {
            return nil
        }
        viewControllers = sceneNodes.flatMap(StoryboardViewController.init)
    }
    
    init?(path: String) {
        let url = URL(fileURLWithPath: path, isDirectory: false)
        self.init(url: url)
    }
    
    static func storyboardsAt(path: String) -> [Storyboard] {
        var files: [String] = []
        
        let fileManager = FileManager.default
        
        let enumerator = fileManager.enumerator(atPath: path)
        while let file = enumerator?.nextObject() as? String {
            if file.pathExtension == "storyboard" {
                files.append(path.appendingPathComponent(file))
            }
        }
        
        files.sort(by: <)
        
        return files.flatMap { Storyboard(path: $0) }
    }
    
}

// MARK: - StoryboardCollectionViewCell.swift -

struct StoryboardCollectionViewCell {
    
    let id: String
    let reuseIdentifier: String?
    let customClass: String?
    
}

extension StoryboardCollectionViewCell: CustomStringConvertible {
    
    var description: String {
        return "id: \(id), reuseIdentifier: \(reuseIdentifier ?? "nil")"
    }
    
}

extension StoryboardCollectionViewCell {
    
    init?(node: XMLNode) {
        guard let element = node as? XMLElement,
            element.name == "collectionViewCell" else {
                return nil
        }
        
        guard let id = element.attribute(forName: "id")?.stringValue else {
            return nil
        }
        self.id = id
        
        reuseIdentifier = element.attribute(forName: "reuseIdentifier")?.stringValue
        customClass = element.attribute(forName: "customClass")?.stringValue
    }
    
}

// MARK: - StoryboardSegue.swift -

enum StoryboardSegueKind: String {
    
    case embed = "embed"
    case presentation = "presentation"
    case relationship = "relationship"
    case show = "show"
    case unwind = "unwind"
    
}

struct StoryboardSegue {
    
    let id: String
    
    let kind: StoryboardSegueKind
    let identifier: String?
    let destination: String
    
}

extension StoryboardSegue: CustomStringConvertible {
    
    var description: String {
        return "id: \(id), kind: \(kind), identifier: \(identifier ?? "nil"), destination: \(destination)"
    }
    
}

extension StoryboardSegue {
    
    init?(node: XMLNode) {
        guard let element = node as? XMLElement,
            element.name == "segue" else {
                return nil
        }
        
        guard let id = element.attribute(forName: "id")?.stringValue else {
            return nil
        }
        self.id = id
        
        guard let kindAttribute = element.attribute(forName: "kind")?.stringValue,
            let kind = StoryboardSegueKind(rawValue: kindAttribute) else {
                return nil
        }
        self.kind = kind
        
        identifier = element.attribute(forName: "identifier")?.stringValue
        
        guard let destination = element.attribute(forName: "destination")?.stringValue else {
            return nil
        }
        self.destination = destination
    }
    
}

// MARK: - StoryboardTableViewCell.swift -

struct StoryboardTableViewCell {
    
    let id: String
    let reuseIdentifier: String?
    let customClass: String?
    
}

extension StoryboardTableViewCell: CustomStringConvertible {
    
    var description: String {
        return "id: \(id), reuseIdentifier: \(reuseIdentifier ?? "nil")"
    }
    
}

extension StoryboardTableViewCell {
    
    init?(node: XMLNode) {
        guard let element = node as? XMLElement,
            element.name == "tableViewCell" else {
                return nil
        }
        
        guard let id = element.attribute(forName: "id")?.stringValue else {
            return nil
        }
        self.id = id
        
        reuseIdentifier = element.attribute(forName: "reuseIdentifier")?.stringValue
        customClass = element.attribute(forName: "customClass")?.stringValue
    }
    
}

// MARK: - StoryboardViewController.swift -

enum StoryboardViewControllerType: String {
    
    case collectionViewController = "collectionViewController"
    case navigationController = "navigationController"
    case pageViewController = "pageViewController"
    case splitViewController = "splitViewController"
    case tabBarController = "tabBarController"
    case tableViewController = "tableViewController"
    case viewController = "viewController"
    
    static let entries: [StoryboardViewControllerType] = [
        .collectionViewController,
        .navigationController,
        .pageViewController,
        .splitViewController,
        .tabBarController,
        .tableViewController,
        .viewController
    ]
    
    var className: String {
        switch self {
        case .collectionViewController:
            return "UICollectionViewController"
        case .navigationController:
            return "UINavigationController"
        case .pageViewController:
            return "UIPageViewController"
        case .splitViewController:
            return "UISplitViewController"
        case .tabBarController:
            return "UITabBarController"
        case .tableViewController:
            return "UITableViewController"
        case .viewController:
            return "UIViewController"
        }
    }
    
}

struct StoryboardViewController {
    
    let id: String
    
    let type: StoryboardViewControllerType
    let storyboardIdentifier: String?
    let customClass: String?
    
    let segues: [StoryboardSegue]
    let tableViewCells: [StoryboardTableViewCell]
    let collectionViewCells: [StoryboardCollectionViewCell]
    
}

extension StoryboardViewController {
    
    func segueWith(id: String) -> StoryboardSegue? {
        return segues
            .first { $0.id == id }
    }
    
    func segueWith(kind: StoryboardSegueKind) -> StoryboardSegue? {
        return segues
            .first { $0.kind == kind }
    }
    
    func tableViewCellWith(id: String) -> StoryboardTableViewCell? {
        return tableViewCells
            .first { $0.id == id }
    }
    
    func collectionViewCellWith(id: String) -> StoryboardCollectionViewCell? {
        return collectionViewCells
            .first { $0.id == id }
    }
    
}

extension StoryboardViewController: CustomStringConvertible {
    
    var description: String {
        return "id: \(id), type: \(type), storyboardIdentifier: \(storyboardIdentifier ?? "nil"), customClass: \(customClass ?? "nil")"
    }
    
}

extension StoryboardViewController {
    
    init?(node: XMLNode) {
        let xpath = StoryboardViewControllerType.entries
            .map { ".//\($0.rawValue)" }
            .joined(separator: " | ")
        
        guard let nodes = try? node.nodes(forXPath: xpath),
            let element = nodes.first as? XMLElement,
            let elementName = element.name,
            nodes.count == 1 else {
                return nil
        }
        
        guard let id = element.attribute(forName: "id")?.stringValue else {
            return nil
        }
        
        guard let type = StoryboardViewControllerType(rawValue: elementName) else {
            return nil
        }
        
        let storyboardIdentifier = element.attribute(forName: "storyboardIdentifier")?.stringValue
        
        let customClass = element.attribute(forName: "customClass")?.stringValue
        
        guard let segueNodes = try? element.nodes(forXPath: ".//segue") else {
            return nil
        }
        let segues = segueNodes.flatMap(StoryboardSegue.init)
        
        guard let tableViewCellNodes = try? element.nodes(forXPath: ".//tableViewCell") else {
            return nil
        }
        let tableViewCells = tableViewCellNodes.flatMap(StoryboardTableViewCell.init)
        
        guard let collectionViewCellNodes = try? element.nodes(forXPath: ".//collectionViewCell") else {
            return nil
        }
        let collectionViewCells = collectionViewCellNodes.flatMap(StoryboardCollectionViewCell.init)
        
        self.id = id
        self.type = type
        self.storyboardIdentifier = storyboardIdentifier
        self.customClass = customClass
        self.segues = segues
        self.tableViewCells = tableViewCells
        self.collectionViewCells = collectionViewCells
    }
    
}

// MARK: - BlackboardCollectionViewCell.swift -

struct BlackboardCollectionViewCell {
    
    let name: String
    let enumName: String
    let identifier: String
    let className: String
    let parameterName: String
    
}

extension BlackboardCollectionViewCell {
    
    init?(collectionViewCell: StoryboardCollectionViewCell, storyboard: Storyboard) {
        guard let reuseIdentifier = collectionViewCell.reuseIdentifier else {
            return nil
        }
        
        name = Naming.name(fromIdentifier: reuseIdentifier)
            .removingSuffix("Cell")
        
        enumName = name.firstCharacterLowercased
        
        identifier = reuseIdentifier
        
        if let customClass = collectionViewCell.customClass {
            className = customClass
            
            parameterName = (customClass
                .removingSuffix("Cell")
                .removingSuffix("CollectionView")
                + "Cell")
                .firstCharacterLowercased
        }
        else {
            className = "UICollectionViewCell"
            parameterName = "cell"
        }
    }
    
}

extension SwiftSource {
    
    func appendCollectionViewCells(_ collectionViewCells: [BlackboardCollectionViewCell]) {
        guard !collectionViewCells.isEmpty else { return }
        
        append("// Collection View Cells")
        append()
        appendCollectionViewCellIdentifier(collectionViewCells)
        appendDequeueCollectionViewCell(collectionViewCells)
        append()
    }
    
    func appendCollectionViewCellIdentifier(_ collectionViewCells: [BlackboardCollectionViewCell]) {
        guard !collectionViewCells.isEmpty else { return }
        
        append("enum CollectionViewCellIdentifier: String") {
            collectionViewCells.forEach { cell in
                append("case \(cell.enumName) = \"\(cell.identifier)\"")
            }
        }
        append()
    }
    
    func castFor(_ collectionViewCell: BlackboardCollectionViewCell) -> String {
        if collectionViewCell.className == "UICollectionViewCell" {
            return ""
        }
        return " as! \(collectionViewCell.className)"
    }
    
    func appendDequeueCollectionViewCell(_ collectionViewCells: [BlackboardCollectionViewCell]) {
        guard !collectionViewCells.isEmpty else { return }
        
        collectionViewCells.forEach { cell in
            append("final func dequeue\(cell.name)Cell(from collectionView: UICollectionView, for indexPath: IndexPath, initialize: ((_ \(cell.parameterName): \(cell.className)) -> Void)? = nil) -> \(cell.className)") {
                append("let collectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewCellIdentifier.\(cell.enumName).rawValue, for: indexPath)\(castFor(cell))")
                append("initialize?(collectionViewCell)")
                append("return collectionViewCell")
            }
            append()
        }
    }
    
}

// MARK: - BlackboardSegue.swift -

struct BlackboardSegue {
    
    let name: String
    let enumName: String
    let identifier: String
    let viewControllerClassName: String
    let navigationControllerClassName: String?
    
}

extension BlackboardSegue {
    
    init?(segue: StoryboardSegue, storyboard: Storyboard) {
        guard let identifier = segue.identifier else {
            return nil
        }
        
        name = identifier
        
        enumName = name.firstCharacterLowercased
        
        self.identifier = identifier
        
        guard let destinationViewController = storyboard.viewControllerWith(id: segue.destination) else {
            return nil
        }
        let destinationCustomClass = destinationViewController.customClass ?? destinationViewController.type.className
        
        if destinationViewController.type == .navigationController {
            guard let rootViewControllerSegue = destinationViewController.segueWith(kind: .relationship) else {
                return nil
            }
            guard let rootViewController = storyboard.viewControllerWith(id: rootViewControllerSegue.destination) else {
                return nil
            }
            viewControllerClassName = rootViewController.customClass ?? rootViewController.type.className
            navigationControllerClassName = destinationCustomClass
        }
        else {
            viewControllerClassName = destinationCustomClass
            navigationControllerClassName = nil
        }
    }
    
}

extension SwiftSource {
    
    func appendInitializeBlockObject() {
        append("private class InitializeBlockObject") {
            append()
            append("let block: ((UIViewController) -> Void)")
            append()
            append("init(block: @escaping ((UIViewController) -> Void))") {
                append("self.block = block")
            }
            append()
        }
        append()
    }
    
    func appendSegues(_ segues: [BlackboardSegue]) {
        append("// Segues")
        append()
        appendSegueIdentifierFor(segues)
        appendHandleSegue()
        appendPerformSegueFor(segues)
        append()
    }
    
    func appendSegueIdentifierFor(_ segues: [BlackboardSegue]) {
        guard !segues.isEmpty else { return }
        
        append("enum SegueIdentifier: String") {
            segues.forEach { segue in
                append("case \(segue.enumName) = \"\(segue.identifier)\"")
            }
        }
        append()
    }
    
    func appendHandleSegue() {
        append("func handleSegue(_ segue: UIStoryboardSegue, sender: Any?)") {
            append("if let initializeBlockObject = sender as? InitializeBlockObject") {
                append("initializeBlockObject.block(segue.destination)")
            }
        }
        append()
    }
    
    func appendPerformSegueFor(_ segues: [BlackboardSegue]) {
        guard !segues.isEmpty else { return }
        
        segues.forEach { segue in
            append("final func perform\(segue.name)Segue(_ initialize: @escaping ((\(segue.viewControllerClassName)) -> Void) = {_ in})") {
                append("let initializeBlock = InitializeBlockObject()") {
                    if let navigationControllerClassName = segue.navigationControllerClassName {
                        append("let navigationController = $0 as! \(navigationControllerClassName)")
                        append("let viewController = navigationController.viewControllers.first as! \(segue.viewControllerClassName)")
                        append("initialize(viewController)")
                    }
                    else {
                        append("initialize($0 as! \(segue.viewControllerClassName))")
                    }
                }
                append("performSegue(withIdentifier: SegueIdentifier.\(segue.enumName).rawValue, sender: initializeBlock)")
            }
            append()
        }
    }
    
}

// MARK: - BlackboardStoryboard.swift -

struct BlackboardStoryboard {
    
    let name: String
    let extensionName: String
    
    let viewControllers: [BlackboardViewController]
    
}

extension BlackboardStoryboard {
    
    init?(storyboard: Storyboard) {
        name = storyboard.name
        
        extensionName = storyboard.name
            .removingSuffix("Storyboard")
            + "StoryboardExtensions.swift"
        
        viewControllers = storyboard.viewControllers
            .flatMap { BlackboardViewController(viewController: $0, storyboard: storyboard) }
            .sorted { $0.className < $1.className }
        guard !viewControllers.isEmpty else {
            return nil
        }
    }
    
}

extension SwiftSource {
    
    func appendStoryboard(_ storyboard: BlackboardStoryboard) {
        append("//")
        append("//  \(storyboard.extensionName)")
        append("//")
        append("//  This file is automatically generated; do not modify.")
        append("//")
        append()
        append("import UIKit")
        append()
        append("private let sharedStoryboardInstance = UIStoryboard(name: \"\(storyboard.name)\", bundle: nil)")
        append()
        appendInitializeBlockObject()
        appendViewControllers(storyboard.viewControllers)
    }
    
}

// MARK: - BlackboardTableViewCell.swift -

struct BlackboardTableViewCell {
    
    let name: String
    let enumName: String
    let identifier: String
    let className: String
    let parameterName: String
    
}

extension BlackboardTableViewCell {
    
    init?(tableViewCell: StoryboardTableViewCell, storyboard: Storyboard) {
        guard let reuseIdentifier = tableViewCell.reuseIdentifier else {
            return nil
        }
        
        name = Naming.name(fromIdentifier: reuseIdentifier)
            .removingSuffix("Cell")
        
        enumName = name.firstCharacterLowercased
        
        identifier = reuseIdentifier
        
        if let customClass = tableViewCell.customClass {
            className = customClass
            
            parameterName = (customClass
                .removingSuffix("Cell")
                .removingSuffix("TableView")
                + "Cell")
                .firstCharacterLowercased
        }
        else {
            className = "UITableViewCell"
            parameterName = "cell"
        }
    }
    
}

extension SwiftSource {
    
    func appendTableViewCells(_ tableViewCells: [BlackboardTableViewCell]) {
        guard !tableViewCells.isEmpty else { return }
        
        append("// Table View Cells")
        append()
        appendTableViewCellIdentifier(tableViewCells)
        appendDequeueTableViewCell(tableViewCells)
        append()
    }
    
    func appendTableViewCellIdentifier(_ tableViewCells: [BlackboardTableViewCell]) {
        guard !tableViewCells.isEmpty else { return }
        
        append("enum TableViewCellIdentifier: String") {
            tableViewCells.forEach { cell in
                append("case \(cell.enumName) = \"\(cell.identifier)\"")
            }
        }
        append()
    }
    
    func castFor(_ tableViewCell: BlackboardTableViewCell) -> String {
        if tableViewCell.className == "UITableViewCell" {
            return ""
        }
        return " as! \(tableViewCell.className)"
    }
    
    func appendDequeueTableViewCell(_ tableViewCells: [BlackboardTableViewCell]) {
        guard !tableViewCells.isEmpty else { return }
        
        tableViewCells.forEach { cell in
            append("final func dequeue\(cell.name)Cell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ \(cell.parameterName): \(cell.className)) -> Void)? = nil) -> \(cell.className)") {
                append("let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.\(cell.enumName).rawValue, for: indexPath)\(castFor(cell))")
                append("initialize?(tableViewCell)")
                append("return tableViewCell")
            }
            append()
        }
    }
    
}

// MARK: - BlackboardViewController.swift -

struct BlackboardViewController {
    
    let className: String
    let identifier: String?
    let navigationControllerIdentifier: String?
    let parameterName: String
    
    let segues: [BlackboardSegue]
    let tableViewCells: [BlackboardTableViewCell]
    let collectionViewCells: [BlackboardCollectionViewCell]
    
}

extension BlackboardViewController {
    
    init?(viewController: StoryboardViewController, storyboard: Storyboard) {
        guard let customClass = viewController.customClass else {
            return nil
        }
        
        className = customClass
        identifier = viewController.storyboardIdentifier
        navigationControllerIdentifier = storyboard.navigationControllerFor(id: viewController.id)?.storyboardIdentifier
        
        parameterName = customClass.firstCharacterLowercased
        
        segues = viewController.segues
            .flatMap { BlackboardSegue(segue: $0, storyboard: storyboard) }
            .sorted { $0.name < $1.name }
        
        tableViewCells = viewController.tableViewCells
            .flatMap { BlackboardTableViewCell(tableViewCell: $0, storyboard: storyboard) }
            .sorted { $0.name < $1.name }
        
        collectionViewCells = viewController.collectionViewCells
            .flatMap { BlackboardCollectionViewCell(collectionViewCell: $0, storyboard: storyboard) }
            .sorted { $0.name < $1.name }
    }
    
}

extension SwiftSource {
    
    func appendViewControllers(_ viewControllers: [BlackboardViewController]) {
        viewControllers.forEach { viewController in
            append("extension \(viewController.className)") {
                append()
                appendInstantiateViewController(viewController)
                appendInstantiateNavigationController(viewController)
                appendSegues(viewController.segues)
                appendTableViewCells(viewController.tableViewCells)
                appendCollectionViewCells(viewController.collectionViewCells)
            }
            append()
        }
    }
    
    func appendInstantiateViewController(_ viewController: BlackboardViewController) {
        guard let identifier = viewController.identifier else { return }
        
        append("final class func instantiateViewControllerFromStoryboard(_ initialize: ((_ \(viewController.parameterName): \(viewController.className)) -> Void)? = nil) -> \(viewController.className)") {
            append("let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: \"\(identifier)\") as! \(viewController.className)")
            append("initialize?(viewController)")
            append("return viewController")
        }
        append()
    }
    
    func appendInstantiateNavigationController(_ viewController: BlackboardViewController) {
        guard let navigationControllerIdentifier = viewController.navigationControllerIdentifier else { return }
        
        append("final class func instantiateNavigationControllerFromStoryboard(_ initialize: ((_ \(viewController.parameterName): \(viewController.className)) -> Void)? = nil) -> UINavigationController") {
            append("let navigationController = sharedStoryboardInstance.instantiateViewController(withIdentifier: \"\(navigationControllerIdentifier)\") as! UINavigationController")
            append("let viewController = navigationController.viewControllers.first as! \(viewController.className)")
            append("initialize?(viewController)")
            append("return navigationController")
        }
        append()
    }
    
}

// MARK: - BlackboardMain.swift -

class BlackboardMain {
    
    static func run() {
        
        let arguments = CommandLine.arguments
        let numberOfArguments = arguments.count - 1
        
        // Version
        
        if arguments.contains("--version") {
            print("Blackboard Version 4.0.0")
            exit(0)
        }
        
        // Usage
        
        if numberOfArguments != 2 {
            let name = arguments[0].lastPathComponent
            print("usage: \(name) [--version] source_directory target_directory")
            print("example: \(name) example/storyboards/ example/source/generated")
            exit(1)
        }
        
        // File Manager
        
        let fileManager = FileManager.default
        
        // Source Directory
        
        let sourceDirectory = arguments[numberOfArguments - 1]
        
        if !fileManager.isDirectory(sourceDirectory) {
            print("\(sourceDirectory): No such source directory")
            exit(1)
        }
        
        // Target Directory
        
        let targetDirectory = arguments[numberOfArguments]
        
        if !fileManager.isDirectory(targetDirectory) {
            print("\(targetDirectory): No such target directory")
            exit(1)
        }
        
        // Find Storyboards
        
        let storyboards = Storyboard.storyboardsAt(path: sourceDirectory)
        
        for storyboard in storyboards {
            if let storyboard = BlackboardStoryboard(storyboard: storyboard) {
                let swiftSource = SwiftSource()
                swiftSource.appendStoryboard(storyboard)
                let source = swiftSource.description
                let targetUrl = URL(fileURLWithPath: "\(targetDirectory)/\(storyboard.extensionName)")
                try! source.write(to: targetUrl, atomically: true, encoding: .utf8)
            }
        }
    }
    
}

BlackboardMain.run()
