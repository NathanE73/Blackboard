//
//  TableStoryboardExtensions.swift
//
//  This file is automatically generated; do not modify.
//

import UIKit

private let sharedStoryboardInstance = UIStoryboard(name: "Table", bundle: nil)

private class InitializeBlockObject {
    
    let block: ((UIViewController) -> Void)
    
    init(block: @escaping ((UIViewController) -> Void)) {
        self.block = block
    }
    
}

extension TableViewController {
    
    final class func instantiateViewControllerFromStoryboard(_ initialize: ((_ tableViewController: TableViewController) -> Void)? = nil) -> TableViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "TableViewController") as! TableViewController
        initialize?(viewController)
        return viewController
    }
    
    // Segues
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: Any?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destination)
        }
    }
    
    // Table View Cells
    
    enum TableViewCellIdentifier: String {
        case accountBalance = "AccountBalance"
        case accountName = "AccountName"
        case legalNotes = "LegalNotes"
    }
    
    final func dequeueAccountBalanceCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ accountBalanceCell: AccountBalanceTableViewCell) -> Void)? = nil) -> AccountBalanceTableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.accountBalance.rawValue, for: indexPath) as! AccountBalanceTableViewCell
        initialize?(tableViewCell)
        return tableViewCell
    }
    
    final func dequeueAccountNameCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ accountNameCell: AccountNameTableViewCell) -> Void)? = nil) -> AccountNameTableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.accountName.rawValue, for: indexPath) as! AccountNameTableViewCell
        initialize?(tableViewCell)
        return tableViewCell
    }
    
    final func dequeueLegalNotesCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ cell: UITableViewCell) -> Void)? = nil) -> UITableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.legalNotes.rawValue, for: indexPath)
        initialize?(tableViewCell)
        return tableViewCell
    }
    
}

extension ViewController {
    
    final class func instantiateViewControllerFromStoryboard(_ initialize: ((_ viewController: ViewController) -> Void)? = nil) -> ViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "ViewController") as! ViewController
        initialize?(viewController)
        return viewController
    }
    
    // Segues
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: Any?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destination)
        }
    }
    
    // Table View Cells
    
    enum TableViewCellIdentifier: String {
        case accountBalance = "account-balance-cell"
        case accountName = "account-name-cell"
        case legalNotes = "legal-notes-cell"
    }
    
    final func dequeueAccountBalanceCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ accountBalanceCell: AccountBalanceTableViewCell) -> Void)? = nil) -> AccountBalanceTableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.accountBalance.rawValue, for: indexPath) as! AccountBalanceTableViewCell
        initialize?(tableViewCell)
        return tableViewCell
    }
    
    final func dequeueAccountNameCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ accountNameCell: AccountNameTableViewCell) -> Void)? = nil) -> AccountNameTableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.accountName.rawValue, for: indexPath) as! AccountNameTableViewCell
        initialize?(tableViewCell)
        return tableViewCell
    }
    
    final func dequeueLegalNotesCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ cell: UITableViewCell) -> Void)? = nil) -> UITableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.legalNotes.rawValue, for: indexPath)
        initialize?(tableViewCell)
        return tableViewCell
    }
    
}
