//
//  TableStoryboardExtensions.swift
//
//  This file is automatically generated; do not modify.
//

import UIKit

private let sharedStoryboardInstance = UIStoryboard(name: "Table", bundle: nil)

private class InitializeBlockObject {
    
    let block: ((UIViewController) -> Void)?
    
    init(block: ((UIViewController) -> Void)?) {
        self.block = block
    }
    
}

extension NameViewController {
    
    final class func instantiateViewControllerFromStoryboard(_ initialize: (@noescape (nameViewController: NameViewController) -> Void)? = nil) -> NameViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "NameViewController") as! NameViewController
        initialize?(nameViewController: viewController)
        return viewController
    }
    
    // Segues
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: AnyObject?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block?(segue.destinationViewController)
        }
    }
    
}

extension NamesViewController {
    
    final class func instantiateViewControllerFromStoryboard(_ initialize: (@noescape (namesViewController: NamesViewController) -> Void)? = nil) -> NamesViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "NamesViewController") as! NamesViewController
        initialize?(namesViewController: viewController)
        return viewController
    }
    
    final class func instantiateNavigationControllerFromStoryboard(_ initialize: (@noescape (namesViewController: NamesViewController) -> Void)? = nil) -> UINavigationController {
        let navigationController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "NamesNavigationController") as! UINavigationController
        let viewController = navigationController.viewControllers.first as! NamesViewController
        initialize?(namesViewController: viewController)
        return navigationController
    }
    
    // Segues
    
    enum SegueIdentifier: String {
        case ShowName = "ShowName"
    }
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: AnyObject?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block?(segue.destinationViewController)
        }
    }
    
    final func performShowNameSegue(_ initialize: (@noescape (nameViewController: NameViewController) -> Void)? = nil) {
        let initializeBlock = InitializeBlockObject() {
            initialize?(nameViewController: $0 as! NameViewController)
        }
        performSegue(withIdentifier: SegueIdentifier.ShowName.rawValue, sender: initializeBlock)
    }
    
    // Table View Cells
    
    enum TableViewCellIdentifier: String {
        case Name = "Name"
    }
    
    final func dequeueNameCellFrom(_ tableView: UITableView, forIndexPath indexPath: IndexPath, initialize: (@noescape (nameCell: NameTableViewCell) -> Void)? = nil) -> NameTableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.Name.rawValue, for: indexPath) as! NameTableViewCell
        initialize?(nameCell: tableViewCell)
        return tableViewCell
    }
    
}
