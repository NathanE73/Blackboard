//
//  Account.blackboard.swift
//
//  This file is automatically generated; do not modify.
//

import UIKit

private let sharedStoryboardInstance = UIStoryboard(name: "Account", bundle: nil)

private class SegueInitialization {
    
    typealias Block = (UIViewController) -> Void
    
    let block: Block
    
    init(block: @escaping Block) {
        self.block = block
    }
    
}

protocol AccountViewControllerSegues {
}

extension AccountViewControllerSegues {
}

extension AccountViewController: AccountViewControllerSegues {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ accountViewController: AccountViewController) -> Void)? = nil) -> AccountViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "AccountViewController") as! AccountViewController
        initialize?(viewController)
        return viewController
    }
    
    // Segues
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    }
    
}

protocol AccountsNavigationControllerSegues {
}

extension AccountsNavigationControllerSegues {
}

extension AccountsNavigationController: AccountsNavigationControllerSegues {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ accountsNavigationController: AccountsNavigationController) -> Void)? = nil) -> AccountsNavigationController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "AccountNavigationController") as! AccountsNavigationController
        initialize?(viewController)
        return viewController
    }
    
    // Segues
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    }
    
}

protocol AccountsTableViewControllerSegues {
}

extension AccountsTableViewControllerSegues {
    
    func prepareForPresentOpenAccountSegue(openAccountViewController: OpenAccountViewController) {
    }
    
    func prepareForShowAccountSegue(accountViewController: AccountViewController) {
    }
    
}

extension AccountsTableViewController: AccountsTableViewControllerSegues {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ accountsTableViewController: AccountsTableViewController) -> Void)? = nil) -> AccountsTableViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "AccountTableViewController") as! AccountsTableViewController
        initialize?(viewController)
        return viewController
    }
    
    final class func instantiateNavigationControllerFromStoryboard(_ initialize: ((_ accountsTableViewController: AccountsTableViewController) -> Void)? = nil) -> UINavigationController {
        let navigationController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "AccountNavigationController") as! UINavigationController
        let viewController = navigationController.viewControllers.first as! AccountsTableViewController
        initialize?(viewController)
        return navigationController
    }
    
    // Segues
    
    enum SegueIdentifier: String {
        case presentOpenAccount = "Present Open Account"
        case showAccount = "Show Account"
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let segueInitialization = sender as? SegueInitialization {
            segueInitialization.block(segue.destination)
            return
        }
        
        guard let identifier = segue.identifier else {
            return
        }
        
        switch SegueIdentifier(rawValue: identifier) {
        case .presentOpenAccount?:
            let navigationController = segue.destination as! UINavigationController
            let viewController = navigationController.viewControllers.first as! OpenAccountViewController
            prepareForPresentOpenAccountSegue(openAccountViewController: viewController)
        case .showAccount?:
            let viewController = segue.destination as! AccountViewController
            prepareForShowAccountSegue(accountViewController: viewController)
        default:
            break
        }
    }
    
    final func performPresentOpenAccountSegue(_ initialize: ((OpenAccountViewController) -> Void)? = nil) {
        var segueInitialization: SegueInitialization?
        if let initialize = initialize {
            segueInitialization = SegueInitialization {
                let navigationController = $0 as! UINavigationController
                let viewController = navigationController.viewControllers.first as! OpenAccountViewController
                initialize(viewController)
            }
        }
        performSegue(withIdentifier: SegueIdentifier.presentOpenAccount.rawValue, sender: segueInitialization)
    }
    
    final func performShowAccountSegue(_ initialize: ((AccountViewController) -> Void)? = nil) {
        var segueInitialization: SegueInitialization?
        if let initialize = initialize {
            segueInitialization = SegueInitialization {
                initialize($0 as! AccountViewController)
            }
        }
        performSegue(withIdentifier: SegueIdentifier.showAccount.rawValue, sender: segueInitialization)
    }
    
    // Table View Cells
    
    enum TableViewCellIdentifier: String {
        case account = "Account"
        case accountOverview = "Account Overview"
        case openNewAccount = "Open New Account"
    }
    
    final func dequeueAccountCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ accountCell: AccountTableViewCell) -> Void)? = nil) -> AccountTableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.account.rawValue, for: indexPath) as! AccountTableViewCell
        initialize?(tableViewCell)
        return tableViewCell
    }
    
    final func dequeueAccountOverviewCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ accountOverviewCell: AccountOverviewTableViewCell) -> Void)? = nil) -> AccountOverviewTableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.accountOverview.rawValue, for: indexPath) as! AccountOverviewTableViewCell
        initialize?(tableViewCell)
        return tableViewCell
    }
    
    final func dequeueOpenNewAccountCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ cell: UITableViewCell) -> Void)? = nil) -> UITableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.openNewAccount.rawValue, for: indexPath)
        initialize?(tableViewCell)
        return tableViewCell
    }
    
}

protocol OpenAccountViewControllerSegues {
}

extension OpenAccountViewControllerSegues {
}

extension OpenAccountViewController: OpenAccountViewControllerSegues {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ openAccountViewController: OpenAccountViewController) -> Void)? = nil) -> OpenAccountViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "OpenAccountViewController") as! OpenAccountViewController
        initialize?(viewController)
        return viewController
    }
    
    final class func instantiateNavigationControllerFromStoryboard(_ initialize: ((_ openAccountViewController: OpenAccountViewController) -> Void)? = nil) -> UINavigationController {
        let navigationController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "OpenAccountNavigationController") as! UINavigationController
        let viewController = navigationController.viewControllers.first as! OpenAccountViewController
        initialize?(viewController)
        return navigationController
    }
    
    // Segues
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    }
    
}
