//
//  PhotoStoryboard.blackboard.swift
//
//  This file is automatically generated; do not modify.
//

import UIKit

private let sharedStoryboardInstance = UIStoryboard(name: "Photo", bundle: nil)

extension PhotoViewController {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ photoViewController: PhotoViewController) -> Void)? = nil) -> PhotoViewController {
        return instantiateViewController(from: sharedStoryboardInstance, identifier: "PhotoViewController", initialize)
    }
    
    final class func instantiateNavigationControllerFromStoryboard(_ initialize: ((_ photoViewController: PhotoViewController) -> Void)? = nil) -> UINavigationController {
        return instantiateNavigationController(from: sharedStoryboardInstance, identifier: "PhotoNavigationController", initialize)
    }
    
}

protocol PhotosCollectionViewControllerSegues {}

extension PhotosCollectionViewControllerSegues {
    
    func prepareForShowPhotoSegue(_ photoViewController: PhotoViewController) {}
    
}

extension PhotosCollectionViewController: PhotosCollectionViewControllerSegues {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ photosCollectionViewController: PhotosCollectionViewController) -> Void)? = nil) -> PhotosCollectionViewController {
        return instantiateViewController(from: sharedStoryboardInstance, identifier: "PhotoCollectionViewController", initialize)
    }
    
    final class func instantiateNavigationControllerFromStoryboard(_ initialize: ((_ photosCollectionViewController: PhotosCollectionViewController) -> Void)? = nil) -> UINavigationController {
        return instantiateNavigationController(from: sharedStoryboardInstance, identifier: "PhotosNavigationController", initialize)
    }
    
    // Segues
    
    enum SegueIdentifier: String {
        case showPhoto = "Show Photo"
    }
    
    final override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let segueInitialization = sender as? SegueInitialization {
            segueInitialization.block(segue.destination)
            return
        }
        
        guard let identifier = segue.identifier else {
            return
        }
        
        switch SegueIdentifier(rawValue: identifier) {
        case .showPhoto?:
            let viewController = segue.destination as! PhotoViewController
            prepareForShowPhotoSegue(viewController)
        case .none:
            break
        }
    }
    
    final func performShowPhotoSegue(_ initialize: ((PhotoViewController) -> Void)? = nil) {
        performViewControllerSegue(SegueIdentifier.showPhoto.rawValue, initialize)
    }
    
    // Collection View Cells
    
    enum CollectionViewCellIdentifier: String {
        case photo = "Photo"
    }
    
    final func dequeuePhotoCell(from collectionView: UICollectionView, for indexPath: IndexPath, initialize: ((_ photoCell: PhotoCollectionViewCell) -> Void)? = nil) -> PhotoCollectionViewCell {
        return collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewCellIdentifier.photo.rawValue, for: indexPath, initialize)
    }
    
}

extension PhotosNavigationController {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ photosNavigationController: PhotosNavigationController) -> Void)? = nil) -> PhotosNavigationController {
        return instantiateViewController(from: sharedStoryboardInstance, identifier: "PhotosNavigationController", initialize)
    }
    
}
