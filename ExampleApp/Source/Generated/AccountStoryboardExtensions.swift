//
//  AccountStoryboardExtensions.swift
//
//  This file is automatically generated; do not modify.
//

import UIKit

private let sharedStoryboardInstance = UIStoryboard(name: "Account", bundle: nil)

private class InitializeBlockObject {
    
    let block: ((UIViewController) -> Void)
    
    init(block: @escaping ((UIViewController) -> Void)) {
        self.block = block
    }
    
}

extension AccountViewController {
    
    // Segues
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: Any?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destination)
        }
    }
    
}

extension AccountsNavigationController {
    
    final class func instantiateViewControllerFromStoryboard(_ initialize: ((_ accountsNavigationController: AccountsNavigationController) -> Void)? = nil) -> AccountsNavigationController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "AccountNavigationController") as! AccountsNavigationController
        initialize?(viewController)
        return viewController
    }
    
    // Segues
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: Any?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destination)
        }
    }
    
}

extension AccountsTableViewController {
    
    final class func instantiateViewControllerFromStoryboard(_ initialize: ((_ accountsTableViewController: AccountsTableViewController) -> Void)? = nil) -> AccountsTableViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "AccountTableViewController") as! AccountsTableViewController
        initialize?(viewController)
        return viewController
    }
    
    final class func instantiateNavigationControllerFromStoryboard(_ initialize: ((_ accountsTableViewController: AccountsTableViewController) -> Void)? = nil) -> UINavigationController {
        let navigationController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "AccountNavigationController") as! UINavigationController
        let viewController = navigationController.viewControllers.first as! AccountsTableViewController
        initialize?(viewController)
        return navigationController
    }
    
    // Segues
    
    enum SegueIdentifier: String {
        case presentOpenAccount = "Present Open Account"
        case showAccount = "Show Account"
    }
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: Any?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destination)
        }
    }
    
    final func performPresentOpenAccountSegue(_ initialize: @escaping ((OpenAccountViewController) -> Void) = {_ in}) {
        let initializeBlock = InitializeBlockObject() {
            let navigationController = $0 as! UINavigationController
            let viewController = navigationController.viewControllers.first as! OpenAccountViewController
            initialize(viewController)
        }
        performSegue(withIdentifier: SegueIdentifier.presentOpenAccount.rawValue, sender: initializeBlock)
    }
    
    final func performShowAccountSegue(_ initialize: @escaping ((AccountViewController) -> Void) = {_ in}) {
        let initializeBlock = InitializeBlockObject() {
            initialize($0 as! AccountViewController)
        }
        performSegue(withIdentifier: SegueIdentifier.showAccount.rawValue, sender: initializeBlock)
    }
    
    // Table View Cells
    
    enum TableViewCellIdentifier: String {
        case account = "Account"
        case accountOverview = "Account Overview"
        case openNewAccount = "Open New Account"
    }
    
    final func dequeueAccountCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ accountCell: AccountTableViewCell) -> Void)? = nil) -> AccountTableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.account.rawValue, for: indexPath) as! AccountTableViewCell
        initialize?(tableViewCell)
        return tableViewCell
    }
    
    final func dequeueAccountOverviewCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ accountOverviewCell: AccountOverviewTableViewCell) -> Void)? = nil) -> AccountOverviewTableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.accountOverview.rawValue, for: indexPath) as! AccountOverviewTableViewCell
        initialize?(tableViewCell)
        return tableViewCell
    }
    
    final func dequeueOpenNewAccountCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ cell: UITableViewCell) -> Void)? = nil) -> UITableViewCell {
        let tableViewCell = tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.openNewAccount.rawValue, for: indexPath)
        initialize?(tableViewCell)
        return tableViewCell
    }
    
}

extension OpenAccountViewController {
    
    final class func instantiateNavigationControllerFromStoryboard(_ initialize: ((_ openAccountViewController: OpenAccountViewController) -> Void)? = nil) -> UINavigationController {
        let navigationController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "OpenAccountNavigationController") as! UINavigationController
        let viewController = navigationController.viewControllers.first as! OpenAccountViewController
        initialize?(viewController)
        return navigationController
    }
    
    // Segues
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: Any?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destination)
        }
    }
    
}
