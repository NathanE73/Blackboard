//
// Copyright (c) 2019 Nathan E. Walczak
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

import Foundation

let MainStoryboardSwiftSource = """
//
//  Main.blackboard.swift
//
//  This file is automatically generated; do not modify.
//

import UIKit

private let sharedStoryboardInstance = UIStoryboard(name: "Main", bundle: nil)

private class SegueInitialization {
    
    typealias Block = (UIViewController) -> Void
    
    let block: Block
    
    init(block: @escaping Block) {
        self.block = block
    }
    
}

protocol FooterViewControllerSegues {
}

extension FooterViewControllerSegues {
}

extension FooterViewController: FooterViewControllerSegues {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ footerViewController: FooterViewController) -> Void)? = nil) -> FooterViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "FooterViewController") as! FooterViewController
        initialize?(viewController)
        return viewController
    }
    
    // Segues
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    }
    
}

protocol MainViewControllerSegues {
}

extension MainViewControllerSegues {
    
    func prepareForFooterSegue(footerViewController: FooterViewController) {
    }
    
    func prepareForPresentAccountsSegue(accountsTableViewController: AccountsTableViewController) {
    }
    
    func prepareForPresentOpenAccountSegue(openAccountViewController: OpenAccountViewController) {
    }
    
    func prepareForPresentPhotoSegue(photoViewController: PhotoViewController) {
    }
    
    func prepareForPresentPhotosSegue(photosCollectionViewController: PhotosCollectionViewController) {
    }
    
}

extension MainViewController: MainViewControllerSegues {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ mainViewController: MainViewController) -> Void)? = nil) -> MainViewController {
        let viewController = sharedStoryboardInstance.instantiateViewController(withIdentifier: "WelcomeViewController") as! MainViewController
        initialize?(viewController)
        return viewController
    }
    
    // Segues
    
    enum SegueIdentifier: String {
        case footer = "Footer"
        case presentAccounts = "Present Accounts"
        case presentOpenAccount = "Present Open Account"
        case presentPhoto = "Present Photo"
        case presentPhotos = "Present Photos"
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let segueInitialization = sender as? SegueInitialization {
            segueInitialization.block(segue.destination)
            return
        }
        
        guard let identifier = segue.identifier else {
            return
        }
        
        switch SegueIdentifier(rawValue: identifier) {
        case .footer?:
            let viewController = segue.destination as! FooterViewController
            prepareForFooterSegue(footerViewController: viewController)
        case .presentAccounts?:
            let navigationController = segue.destination as! AccountsNavigationController
            let viewController = navigationController.viewControllers.first as! AccountsTableViewController
            prepareForPresentAccountsSegue(accountsTableViewController: viewController)
        case .presentOpenAccount?:
            let navigationController = segue.destination as! UINavigationController
            let viewController = navigationController.viewControllers.first as! OpenAccountViewController
            prepareForPresentOpenAccountSegue(openAccountViewController: viewController)
        case .presentPhoto?:
            let navigationController = segue.destination as! UINavigationController
            let viewController = navigationController.viewControllers.first as! PhotoViewController
            prepareForPresentPhotoSegue(photoViewController: viewController)
        case .presentPhotos?:
            let navigationController = segue.destination as! PhotosNavigationController
            let viewController = navigationController.viewControllers.first as! PhotosCollectionViewController
            prepareForPresentPhotosSegue(photosCollectionViewController: viewController)
        default:
            break
        }
    }
    
    final func performFooterSegue(_ initialize: ((FooterViewController) -> Void)? = nil) {
        var segueInitialization: SegueInitialization?
        if let initialize = initialize {
            segueInitialization = SegueInitialization {
                initialize($0 as! FooterViewController)
            }
        }
        performSegue(withIdentifier: SegueIdentifier.footer.rawValue, sender: segueInitialization)
    }
    
    final func performPresentAccountsSegue(_ initialize: ((AccountsTableViewController) -> Void)? = nil) {
        var segueInitialization: SegueInitialization?
        if let initialize = initialize {
            segueInitialization = SegueInitialization {
                let navigationController = $0 as! AccountsNavigationController
                let viewController = navigationController.viewControllers.first as! AccountsTableViewController
                initialize(viewController)
            }
        }
        performSegue(withIdentifier: SegueIdentifier.presentAccounts.rawValue, sender: segueInitialization)
    }
    
    final func performPresentOpenAccountSegue(_ initialize: ((OpenAccountViewController) -> Void)? = nil) {
        var segueInitialization: SegueInitialization?
        if let initialize = initialize {
            segueInitialization = SegueInitialization {
                let navigationController = $0 as! UINavigationController
                let viewController = navigationController.viewControllers.first as! OpenAccountViewController
                initialize(viewController)
            }
        }
        performSegue(withIdentifier: SegueIdentifier.presentOpenAccount.rawValue, sender: segueInitialization)
    }
    
    final func performPresentPhotoSegue(_ initialize: ((PhotoViewController) -> Void)? = nil) {
        var segueInitialization: SegueInitialization?
        if let initialize = initialize {
            segueInitialization = SegueInitialization {
                let navigationController = $0 as! UINavigationController
                let viewController = navigationController.viewControllers.first as! PhotoViewController
                initialize(viewController)
            }
        }
        performSegue(withIdentifier: SegueIdentifier.presentPhoto.rawValue, sender: segueInitialization)
    }
    
    final func performPresentPhotosSegue(_ initialize: ((PhotosCollectionViewController) -> Void)? = nil) {
        var segueInitialization: SegueInitialization?
        if let initialize = initialize {
            segueInitialization = SegueInitialization {
                let navigationController = $0 as! PhotosNavigationController
                let viewController = navigationController.viewControllers.first as! PhotosCollectionViewController
                initialize(viewController)
            }
        }
        performSegue(withIdentifier: SegueIdentifier.presentPhotos.rawValue, sender: segueInitialization)
    }
    
}

"""
