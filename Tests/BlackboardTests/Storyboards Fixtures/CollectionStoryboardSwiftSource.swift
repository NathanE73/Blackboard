//
// Copyright (c) 2019 Nathan E. Walczak
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

import Foundation

let CollectionStoryboardSwiftSource = """
//
//  CollectionStoryboardExtensions.swift
//
//  This file is automatically generated; do not modify.
//

import UIKit

private let sharedStoryboardInstance = UIStoryboard(name: "Collection", bundle: nil)

private class InitializeBlockObject {
    
    let block: ((UIViewController) -> Void)
    
    init(block: @escaping ((UIViewController) -> Void)) {
        self.block = block
    }
    
}

extension CollectionViewController {
    
    // Segues
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: Any?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destination)
        }
    }
    
    // Collection View Cells
    
    enum CollectionViewCellIdentifier: String {
        case blue = "Blue"
        case green = "Green"
        case red = "Red"
    }
    
    final func dequeueBlueCell(from collectionView: UICollectionView, for indexPath: IndexPath, initialize: ((_ blueCell: BlueCollectionViewCell) -> Void)? = nil) -> BlueCollectionViewCell {
        let collectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewCellIdentifier.blue.rawValue, for: indexPath) as! BlueCollectionViewCell
        initialize?(collectionViewCell)
        return collectionViewCell
    }
    
    final func dequeueGreenCell(from collectionView: UICollectionView, for indexPath: IndexPath, initialize: ((_ greenCell: GreenCollectionViewCell) -> Void)? = nil) -> GreenCollectionViewCell {
        let collectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewCellIdentifier.green.rawValue, for: indexPath) as! GreenCollectionViewCell
        initialize?(collectionViewCell)
        return collectionViewCell
    }
    
    final func dequeueRedCell(from collectionView: UICollectionView, for indexPath: IndexPath, initialize: ((_ redCell: RedCollectionViewCell) -> Void)? = nil) -> RedCollectionViewCell {
        let collectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewCellIdentifier.red.rawValue, for: indexPath) as! RedCollectionViewCell
        initialize?(collectionViewCell)
        return collectionViewCell
    }
    
}

extension ViewController {
    
    // Segues
    
    func handleSegue(_ segue: UIStoryboardSegue, sender: Any?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destination)
        }
    }
    
    // Collection View Cells
    
    enum CollectionViewCellIdentifier: String {
        case blue = "blue cell"
        case green = "green cell"
        case red = "red cell"
    }
    
    final func dequeueBlueCell(from collectionView: UICollectionView, for indexPath: IndexPath, initialize: ((_ blueCell: BlueCollectionViewCell) -> Void)? = nil) -> BlueCollectionViewCell {
        let collectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewCellIdentifier.blue.rawValue, for: indexPath) as! BlueCollectionViewCell
        initialize?(collectionViewCell)
        return collectionViewCell
    }
    
    final func dequeueGreenCell(from collectionView: UICollectionView, for indexPath: IndexPath, initialize: ((_ greenCell: GreenCollectionViewCell) -> Void)? = nil) -> GreenCollectionViewCell {
        let collectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewCellIdentifier.green.rawValue, for: indexPath) as! GreenCollectionViewCell
        initialize?(collectionViewCell)
        return collectionViewCell
    }
    
    final func dequeueRedCell(from collectionView: UICollectionView, for indexPath: IndexPath, initialize: ((_ redCell: RedCollectionViewCell) -> Void)? = nil) -> RedCollectionViewCell {
        let collectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewCellIdentifier.red.rawValue, for: indexPath) as! RedCollectionViewCell
        initialize?(collectionViewCell)
        return collectionViewCell
    }
    
}

"""
