//
// Copyright (c) 2019 Nathan E. Walczak
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

import Foundation

let SupportedStoryboardSwiftSource = """
//
//  Supported.blackboard.swift
//
//  This file is automatically generated; do not modify.
//

import UIKit

private let sharedStoryboardInstance = UIStoryboard(name: "Supported", bundle: nil)

extension EmptyCollectionViewController {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ emptyCollectionViewController: EmptyCollectionViewController) -> Void)? = nil) -> EmptyCollectionViewController {
        return instantiateViewController(from: sharedStoryboardInstance, identifier: "EmptyCollectionViewController", initialize)
    }
    
    // Collection View Cells
    
    enum CollectionViewCellIdentifier: String {
        case cell = "Cell"
    }
    
    final func dequeueCell(from collectionView: UICollectionView, for indexPath: IndexPath, initialize: ((_ cell: UICollectionViewCell) -> Void)? = nil) -> UICollectionViewCell {
        return collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewCellIdentifier.cell.rawValue, for: indexPath, initialize)
    }
    
}

extension EmptyNavigationController {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ emptyNavigationController: EmptyNavigationController) -> Void)? = nil) -> EmptyNavigationController {
        return instantiateViewController(from: sharedStoryboardInstance, identifier: "EmptyNavigationController", initialize)
    }
    
}

extension EmptyPageViewController {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ emptyPageViewController: EmptyPageViewController) -> Void)? = nil) -> EmptyPageViewController {
        return instantiateViewController(from: sharedStoryboardInstance, identifier: "EmptyPageViewController", initialize)
    }
    
}

extension EmptyTabBarController {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ emptyTabBarController: EmptyTabBarController) -> Void)? = nil) -> EmptyTabBarController {
        return instantiateViewController(from: sharedStoryboardInstance, identifier: "EmptyTabBarController", initialize)
    }
    
}

extension EmptyTableViewController {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ emptyTableViewController: EmptyTableViewController) -> Void)? = nil) -> EmptyTableViewController {
        return instantiateViewController(from: sharedStoryboardInstance, identifier: "EmptyTableViewController", initialize)
    }
    
    // Table View Cells
    
    enum TableViewCellIdentifier: String {
        case cell = "Cell"
    }
    
    final func dequeueCell(from tableView: UITableView, for indexPath: IndexPath, initialize: ((_ cell: UITableViewCell) -> Void)? = nil) -> UITableViewCell {
        return tableView.dequeueReusableCell(withIdentifier: TableViewCellIdentifier.cell.rawValue, for: indexPath, initialize)
    }
    
}

extension EmptyViewController {
    
    final class func instantiateFromStoryboard(_ initialize: ((_ emptyViewController: EmptyViewController) -> Void)? = nil) -> EmptyViewController {
        return instantiateViewController(from: sharedStoryboardInstance, identifier: "EmptyViewController", initialize)
    }
    
    final class func instantiateNavigationControllerFromStoryboard(_ initialize: ((_ emptyViewController: EmptyViewController) -> Void)? = nil) -> UINavigationController {
        return instantiateNavigationController(from: sharedStoryboardInstance, identifier: "EmptyNavigationController", initialize)
    }
    
}

"""
